---
alwaysApply: true
---

# 代码修改行为准则

## 核心原则

**尊重用户的代码修改，不要随意改回用户已经调整过的代码**

## 修改前必须做的

1. **仔细阅读用户当前的代码状态**
2. **理解用户已经做了哪些修改**
3. **确认用户修改的意图和目的**
4. **在用户修改的基础上进行必要的调整**

## 禁止的行为

- ❌ 把用户改过的代码改回原样
- ❌ 忽略用户已经调整的逻辑
- ❌ 按照"标准做法"覆盖用户的定制化修改
- ❌ 假设用户代码是错误的，强制"纠正"

## 正确的修改方式

1. **增量修改**：在用户代码基础上添加或调整
2. **保持一致性**：确保修改与用户现有逻辑兼容
3. **最小化改动**：只修改真正需要调整的部分
4. **保留用户意图**：理解并保持用户的修改目的

## 特殊情况处理

- **如果用户修改确实有问题**：先询问用户，解释问题，获得同意后再修改
- **如果需要重构**：先说明重构的必要性和好处，让用户决定
- **如果涉及架构调整**：先讨论影响范围，确保用户理解

## 修改后的确认

1. **解释修改了什么**
2. **说明为什么这样修改**
3. **确认修改符合用户需求**
4. **提供测试建议**

## 示例场景

**用户修改了密钥**：

- ✅ 在用户修改的基础上调整其他相关代码
- ❌ 把密钥改回"标准值"

**用户调整了逻辑**：

- ✅ 理解用户逻辑，在此基础上优化
- ❌ 强制使用"标准实现"

**用户定制了配置**：

- ✅ 保持用户配置，调整相关代码适配
- ❌ 重置为用户配置

## 沟通原则

- 先理解，后修改
- 有疑问时先询问
- 修改后要解释
- 尊重用户的选择

# 代码修改行为准则

## 核心原则

**尊重用户的代码修改，不要随意改回用户已经调整过的代码**

## 修改前必须做的

1. **仔细阅读用户当前的代码状态**
2. **理解用户已经做了哪些修改**
3. **确认用户修改的意图和目的**
4. **在用户修改的基础上进行必要的调整**

## 禁止的行为

- ❌ 把用户改过的代码改回原样
- ❌ 忽略用户已经调整的逻辑
- ❌ 按照"标准做法"覆盖用户的定制化修改
- ❌ 假设用户代码是错误的，强制"纠正"

## 正确的修改方式

1. **增量修改**：在用户代码基础上添加或调整
2. **保持一致性**：确保修改与用户现有逻辑兼容
3. **最小化改动**：只修改真正需要调整的部分
4. **保留用户意图**：理解并保持用户的修改目的

## 特殊情况处理

- **如果用户修改确实有问题**：先询问用户，解释问题，获得同意后再修改
- **如果需要重构**：先说明重构的必要性和好处，让用户决定
- **如果涉及架构调整**：先讨论影响范围，确保用户理解

## 修改后的确认

1. **解释修改了什么**
2. **说明为什么这样修改**
3. **确认修改符合用户需求**
4. **提供测试建议**

## 示例场景

**用户修改了密钥**：

- ✅ 在用户修改的基础上调整其他相关代码
- ❌ 把密钥改回"标准值"

**用户调整了逻辑**：

- ✅ 理解用户逻辑，在此基础上优化
- ❌ 强制使用"标准实现"

**用户定制了配置**：

- ✅ 保持用户配置，调整相关代码适配
- ❌ 重置为用户配置

## 沟通原则

- 先理解，后修改
- 有疑问时先询问
- 修改后要解释
- 尊重用户的选择
